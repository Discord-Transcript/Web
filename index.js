

const { existsSync, createReadStream } = require('fs')
const { resolve, join } = require('path')
const mime = require('mime-types')
const https = require('https')
const ejs = require('ejs')
const { minify } = require('html-minifier')


const markdown = require('./src/markdown');
const cors = require("cors");
const Formatter = require('./src/formatter')
const fs = require("fs");
const Discord = require("discord.js");
const client = new Discord.Client();
const scrape = require('website-scraper');
const config = require("./config.json");

// Stuff
const assets = require('./src/assets')

const testData = require('./example')
const express = require("express");

if(!config.token || !config.hostname || !config.log_channel || !config.port) throw Error(`Config hasn't been filled out`);
if(!config.token || !config.hostname || !config.log_channel || !config.port) return;



client.login(config.token);



let app = express();
app.use(cors());
 app.engine("html", ejs.renderFile);
    app.set('view engine', 'ejs');
    app.set('views', join(__dirname, "./views"));
app.use(express.json());
app.use(express.urlencoded({
	extended: false
}));



app.get("/view", async(req,res) => {
    let id = req.query.id;
    if(!id) return res.status(404).end();
    let data = JSON.parse(fs.readFileSync(join(__dirname, `./transcripts/${id}.json`)));
    if(!data) return res.status(404).end();
    const fm = new Formatter(data)
      const formatted = await fm.format()
      if (!formatted) {
        res.writeHead(400)
        return res.end()
      }
      const hostname = `${req.headers['x-forwarded-proto'] || 'http'}://${req.headers.host}`
      res.render('index', {
        data: formatted,
        assets,
        markdown,
        hostname,
        key: id
      });



      setTimeout(function() {

        fs.unlinkSync(join(__dirname, `./transcripts/${id}.json`));
      }, 180000)
      
});

app.all("/new", async(req,res) => {
    let id = req.query.id;
 if(!id) return res.send("Invalid ID or Body");
    


    


   

    fs.writeFile(join(__dirname, `./transcripts/${id}.json`), JSON.stringify(req.body), function(err) {
	    if(err) return console.log(err);
    });


    const options = {
  urls: [`${req.headers['x-forwarded-proto'] || 'http'}://${req.headers.host}/view?id=${id}`],
  directory: './download/' + id,
     recursive: true,
};
const result = await scrape(options);


let channel = await client.channels.cache.get(config.log_channel);
	let attachment = new Discord.MessageAttachment(join(__dirname, `./download/${id}/index.html`), `Transcript Generated By Discord Transcript`)

let msg = await channel.send(attachment);
 
 return res.status(200).send({
			status: 200,
			message: `${msg.attachments.first().id || 'unknown'}`,
			protocol: req.protocol,
			method: req.method,
		});
    
});

app.listen(process.env.PORT || 3000);
